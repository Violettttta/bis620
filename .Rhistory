function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x - c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `-` for bis620 sparse matrix and dgeMatrix
setMethod(
"-",
c(e1="bis620_sparse_matrix",e2="dgeMatrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x - c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `-` for bis620 sparse matrix and dgCMatrix
setMethod(
"-",
c(e1="bis620_sparse_matrix",e2="dgCMatrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x - c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
############################## `*` ##############################
# `*` for bis620 sparse matrix and bis620 sparse matrix
setMethod(
"*",
c(e1="bis620_sparse_matrix",e2="bis620_sparse_matrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- data.frame(i=e2@i,j=e2@j,x=e2@x)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x * c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `*` for bis620 sparse matrix and dense matrix
setMethod(
"*",
c(e1="bis620_sparse_matrix",e2="matrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x * c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `*` for bis620 sparse matrix and dgeMatrix
setMethod(
"*",
c(e1="bis620_sparse_matrix",e2="dgeMatrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x * c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `*` for bis620 sparse matrix and dgCMatrix
setMethod(
"*",
c(e1="bis620_sparse_matrix",e2="dgCMatrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x * c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
############################## `/` ##############################
# `/` for bis620 sparse matrix and bis620 sparse matrix
setMethod(
"/",
c(e1="bis620_sparse_matrix",e2="bis620_sparse_matrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- data.frame(i=e2@i,j=e2@j,x=e2@x)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x / c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `/` for bis620 sparse matrix and dense matrix
setMethod(
"/",
c(e1="bis620_sparse_matrix",e2="matrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x / c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `/` for bis620 sparse matrix and dgeMatrix
setMethod(
"/",
c(e1="bis620_sparse_matrix",e2="dgeMatrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x / c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `/` for bis620 sparse matrix and dgCMatrix
setMethod(
"/",
c(e1="bis620_sparse_matrix",e2="dgCMatrix"),
function(e1, e2) {
e1 <- data.frame(i=e1@i,j=e1@j,x=e1@x)
e2 <- dense_to_sparse(e2)
colnames(e1) <- c("i","j","x")
colnames(e2) <- c("i","j","x")
c <- merge(e1, e2, by = c("i", "j"), all = TRUE,
suffixes = c("", "2"))
c$x[is.na(c$x)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x / c$x2
a <- bis620_sparse_matrix(
i = c$i,
j = c$j,
x = c$x)
a
}
)
# `%*%` for bis620 sparse matrix and bis620 sparse matrix
setMethod(
"%*%",
c(x="bis620_sparse_matrix",y="bis620_sparse_matrix"),
function(x, y) {
x <- data.frame(i=x@i,j=x@j,x=x@x)
y <- data.frame(i=y@i,j=y@j,x=y@x)
w <- c()
e <- c()
r <- c()
for (row in unique(x$i)){
for (col in unique(y$j)){
p <- x[x$i == row,]
q <- y[y$j == col,]
full <- merge(p,q,by.x="j",by.y="i")
full$x <- full$x.x*full$x.y
w <- c(w, row)
e <- c(e, col)
r <- c(r, sum(full$x))
}
}
a <- data.frame(i = w, j = e, x = r)
a <- a[a$x != 0,]
b <- bis620_sparse_matrix(i = a$i, j = a$j, x = a$x)
}
)
# `%*%` for bis620 sparse matrix and dense matrix
setMethod(
"%*%",
c(x="bis620_sparse_matrix",y="matrix"),
function(x, y) {
x <- data.frame(i=x@i,j=x@j,x=x@x)
y <- dense_to_sparse(y)
w <- c()
e <- c()
r <- c()
for (row in unique(x$i)){
for (col in unique(y$j)){
p <- x[x$i == row,]
q <- y[y$j == col,]
full <- merge(p,q,by.x="j",by.y="i")
full$x <- full$x.x*full$x.y
w <- c(w, row)
e <- c(e, col)
r <- c(r, sum(full$x))
}
}
a <- data.frame(i = w, j = e, x = r)
a <- a[a$x != 0,]
b <- bis620_sparse_matrix(i = a$i, j = a$j, x = a$x)
}
)
# `%*%` for bis620 sparse matrix and dgeMatrix
setMethod(
"%*%",
c(x="bis620_sparse_matrix",y="dgeMatrix"),
function(x, y) {
x <- data.frame(i=x@i,j=x@j,x=x@x)
y <- dense_to_sparse(y)
w <- c()
e <- c()
r <- c()
for (row in unique(x$i)){
for (col in unique(y$j)){
p <- x[x$i == row,]
q <- y[y$j == col,]
full <- merge(p,q,by.x="j",by.y="i")
full$x <- full$x.x*full$x.y
w <- c(w, row)
e <- c(e, col)
r <- c(r, sum(full$x))
}
}
a <- data.frame(i = w, j = e, x = r)
a <- a[a$x != 0,]
b <- bis620_sparse_matrix(i = a$i, j = a$j, x = a$x)
}
)
# `%*%` for bis620 sparse matrix and dgCMatrix
setMethod(
"%*%",
c(x="bis620_sparse_matrix",y="dgCMatrix"),
function(x, y) {
x <- data.frame(i=x@i,j=x@j,x=x@x)
y <- dense_to_sparse(y)
w <- c()
e <- c()
r <- c()
for (row in unique(x$i)){
for (col in unique(y$j)){
p <- x[x$i == row,]
q <- y[y$j == col,]
full <- merge(p,q,by.x="j",by.y="i")
full$x <- full$x.x*full$x.y
w <- c(w, row)
e <- c(e, col)
r <- c(r, sum(full$x))
}
}
a <- data.frame(i = w, j = e, x = r)
a <- a[a$x != 0,]
b <- bis620_sparse_matrix(i = a$i, j = a$j, x = a$x)
}
)
# `%*%` for dgCMatrix and bis620 sparse matrix
setMethod(
"%*%",
c(x="dgCMatrix",y="bis620_sparse_matrix"),
function(x, y) {
x <- dense_to_sparse(x)
y <- data.frame(i=y@i,j=y@j,x=y@x)
w <- c()
e <- c()
r <- c()
for (row in unique(x$i)){
for (col in unique(y$j)){
p <- x[x$i == row,]
q <- y[y$j == col,]
full <- merge(p,q,by.x="j",by.y="i")
full$x <- full$x.x*full$x.y
w <- c(w, row)
e <- c(e, col)
r <- c(r, sum(full$x))
}
}
a <- data.frame(i = w, j = e, x = r)
a <- a[a$x != 0,]
b <- bis620_sparse_matrix(i = a$i, j = a$j, x = a$x)
}
)
class(x3)
0.73^0.8
0.95*0.73^0.8+0.01*0.73
0.95*0.73^0.8+0.05*0.73
0.01*0.73^0.8+0.99*0.73
(0.7750534+0.7304742)/2
844/0.7527638/0.99
844/0.7527638/0.99/0.95
844/0.7527638/0.99/0.95*2
0.95^4*0.73^0.8+0.05^4*0.73
0.01^4*0.73^0.8+0.99^4*0.73
library(bis620)
(0.6332218+0.7012351)/2
844/0.6672284/0.99/0.95
(1-5%)^4*0.7774246 + 5%^4*0.73
(1-5%)^4*0.7774246 + .05^4*0.73
(1-.05)^4*0.7774246 + .05^4*0.73
1-0.6332218
1-0.7012351
(0.3667782+0.2987649)/2
844/0.3327716/0.99/0.95
0.2^(1/4)^5
0.2^(5/4)
1- 0.1337481
log(0.8662519)
-0.1435795^2
(-0.1435795)^2
42.04/0.02061507
2039.285/0.428/0.99/0.95
4*(1.28+1.96)^2
41.9904/0.02061507
0.27^(5/4)
1-0.1946277
0.2^(5.5/4)
1-0.1093745
log(0.8906255)
0.1158313^2
41.9904/0.01341689/0.428/0.99/0.95
0.27^(5.5/4)
1-0.1652438
0.8347562^(0.8^(5.5/4))
0.95^5.5*0.8755583+0.05^5.5*0.8347562
1-0.6603359
0.99^5.5*0.8347562+0.01^5.5*0.8755583
1-0.7898656
(0.3396641+0.2101344)/2
1-0.7774246
0.95^4*0.2225754+0.05^4*0.27
0.99^4*0.27+0.01^4*0.2225754
(0.1812907+0.2593609)/2
844/0.2203258/0.99/0.95
1 - 0.7774246
844/0.2203258/(1-0.01^4)/0.95
844/0.2203258/(0.99^4)/0.95
(1-0.27)^(5.5/4)
(1-0.27)^(5.5/4)^0.8
1-0.6487374
1-0.6662929
0.95^5.5*0.3337071+0.05^5.5*0.3512626
0.99^5.5*0.3512626+0.01^5.5*0.3337071
(0.251678+0.3323728)
(0.251678+0.3323728)/2
844/0.2920254/0.99^4/0.95
844/0.2920254/0.99^5.5/0.95
4(1.96+1.28)^2/(log(0.773)^2)
4*(1.96+1.28)^2/(log(0.773)^2)
4*(1.96+1.28)^2/(log(0.773)^2)/0.2920254/0.99^5.5/0.95
setMethod(
"+",
signature(e1 = "character", e2 = "numeric"),
function(e1, e2) {
paste0(e1, as.character(e2))
}
)
a+1
o+1
a
"a"+1
setMethod(
"Arith",
signature(e1 = "character", e2 = "numeric"),
function(e1, e2) {
paste0(e1, as.character(e2))
}
)
"a" Arith 1
`Arith`("a", 1)
`Arith`("3", 1)
`+`(3, 1)
"3" +1
"3" Arith 1
"3" `Arith` 1
"3" "Arith" 1
c(1,2) + 1
setClass("myclass",
slots = c(val = "character")
)
setMethod(
"Arith",
signature(e1 = "myclass", e2 = "numeric"),
function(e1, e2) {
paste0(e1, as.character(e2))
}
)
a <- new("myclass", val = "test")
a + 3
a
a@val + 3
setClass("myclass",
slots = c(val = "character")
)
setMethod(
"Arith",
signature(e1 = "myclass", e2 = "numeric"),
function(e1, e2) {
paste0(e1@val, as.character(e2))
}
)
a <- new("myclass", val = "test")
a + 3
a - 3
?Ops
a / 3
setMethod(
"+",
signature(e1 = "myclass", e2 = "numeric"),
function(e1, e2) {
paste0(e1@val, as.character(e2))
}
)
a + 3
a - 3
a / 3
increment_generator <- function(start = 1) {
val <- start - 1
function() {
val <<- val + 1
val
}
}
inc <- increment_generator()
inc
inc()
inc()
library(foreach)
registerDoSEQ()
system.time({
foreach(it = icount(10), .combine = c) %dopar% {
Sys.sleep(1)
it + 1
}
})
reticulate::repl_python()
